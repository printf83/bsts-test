"use strict";(self.webpackChunk_printf83_bsts_test=self.webpackChunk_printf83_bsts_test||[]).push([[6947],{6947:(e,t,i)=>{i.r(t),i.d(t,{visually_hidden:()=>l});var n=i(195),s=i(7763);const l={title:"Visually hidden",description:"Use these helpers to visually hide elements but keep them accessible to assistive technologies.",item:()=>[new s.qi([new s.fL("Visually hide an element while still allowing it to be exposed to assistive technologies (such as screen readers) with {{.visually-hidden}}. Use {{.visually-hidden-focusable}} to visually hide an element by default, but to display it when it’s focused (e.g. by a keyboard-only user). {{.visually-hidden-focusable}} can also be applied to a container–thanks to {{:focus-within}}, the container will be displayed when any child element of the container receives focus."),new s.TU({output:()=>[new n.h.h(2,{visually:"hidden"},"Title for screen readers"),new n.h.a({visually:"hidden-focusable",href:"#content"},"Skip to main content"),new n.h.hi({visually:"hidden-focusable"},["A container wiht a ",new n.h.a({href:"#"},"focusable element"),"."])]}),new s.fL("Both {{visually-hidden}} and {{visually-hidden-focusable}} can also be used as mixins."),new s.LX({type:"css",code:"\n\t\t\t\t\t\t// Usage as a mixin\n\n\t\t\t\t\t\t.visually-hidden-title {\n\t\t\t\t\t\t@include visually-hidden;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t.skip-navigation {\n\t\t\t\t\t\t@include visually-hidden-focusable;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t"})])]}}}]);