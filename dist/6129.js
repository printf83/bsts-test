"use strict";(self.webpackChunk_printf83_bsts_test=self.webpackChunk_printf83_bsts_test||[]).push([[6129],{6129:(t,e,n)=>{n.r(e),n.d(e,{list:()=>a});var o=n(195),i=n(7763);const a={title:"List group",description:"List groups are a flexible and powerful component for displaying a series of content. Modify and extend them to support just about any content within.",item:()=>[new i.qi([new i.TN("Basic example"),new i.fL("The most basic list group is an unordered list ({{b.list.container}}) with list items ({{b.list.item}}) and the proper classes. Build upon it with the options that follow, or with your own CSS as needed."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC([new o.b.pb.wc("An item"),new o.b.pb.wc("A second item"),new o.b.pb.wc("A third item"),new o.b.pb.wc("A fourth item"),new o.b.pb.wc("And a fifth one")])})]),new i.qi([new i.TN("Active items"),new i.fL("Add {{active:true}} to a {{b.list.item}} to indicate the current active selection."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC([new o.b.pb.wc({active:!0},"An active item"),new o.b.pb.wc("A second item"),new o.b.pb.wc("A third item"),new o.b.pb.wc("A fourth item"),new o.b.pb.wc("And a fifth one")])})]),new i.qi([new i.TN("Disabled items"),new i.fL("Add {{disabled:true}} to a {{b.list.item}} to make it appear disabled."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC([new o.b.pb.wc({disabled:!0},"A disabled item"),new o.b.pb.wc("A second item"),new o.b.pb.wc("A third item"),new o.b.pb.wc("A fourth item"),new o.b.pb.wc("And a fifth one")])})]),new i.qi([new i.TN("Links and buttons"),new i.fL("Use {{b.tabList.item({href:''})}}s to create actionable list group items with hover, disabled, and active states by set {{action:true}} property. Bootstrap separate these pseudo-classes to ensure list groups made of non-interactive elements (like {{h.li}}s or {{h.div}}s) don’t provide a click or tap affordance."),new i.fL("{{bsts}} not {{b::use the standard}} {{cb::.btn}}{{b:: classes here}}."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.SN.container([new o.b.SN.item({href:"#",active:!0},"The current link item"),new o.b.SN.item({href:"#"},"A second link item"),new o.b.SN.item({href:"#"},"A third link item"),new o.b.SN.item({href:"#"},"A fourth link item"),new o.b.SN.item({disabled:!0},"A disabled link item")])}),new i.fL("With {{b.list.item}}s or {{b.tabList.item}}, {{bsts}} also make use of the {{disabled}} attribute instead of the {{.disabled}} class automaticly."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.SN.container([new o.b.SN.item({href:"#",action:!0,active:!0},"The current link item"),new o.b.SN.item({href:"#",action:!0},"A second link item"),new o.b.SN.item({href:"#",action:!0},"A third link item"),new o.b.SN.item({href:"#",action:!0},"A fourth link item"),new o.b.SN.item({disabled:!0,action:!0},"A disabled link item")])})]),new i.qi([new i.TN("Flush"),new i.fL("Set {{flush:true}} property on {{b.list.container}} to remove some borders and rounded corners to render list group items edge-to-edge in a parent container (e.g., cards)."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC({flush:!0},[new o.b.pb.wc("An item"),new o.b.pb.wc("A second item"),new o.b.pb.wc("A third item"),new o.b.pb.wc("A fourth item"),new o.b.pb.wc("And a fifth one")])})]),new i.qi([new i.TN("Numbered"),new i.fL("Set {{numbered:true}} property on {{b.list.container}} to opt into numbered list group items. Numbers are generated via CSS for better placement inside list group items and to allow for better customization."),new i.fL("Numbers are generated by {{counter-reset}} on the {{h.ol}}, and then styled and placed with a {{/://:/before}} pseudo-element on the {{h.li}} with counter-increment and content."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC({numbered:!0},[new o.b.pb.wc("A list item"),new o.b.pb.wc("A list item"),new o.b.pb.wc("A list item")])}),new i.fL("These work great with custom content as well."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC({numbered:!0},[1,2,3].map((t=>new o.b.pb.wc({display:"flex",justifyContent:"between",alignItem:"start"},[new o.h.hi({marginStart:2,marginEnd:"auto"},[new o.h.hi({fontWeight:"bold"},"Subheading"),"Content for list item"]),new o.b.R0({bgColor:"primary",rounded:"pill"},"14")]))))})]),new i.qi([new i.TN("Horizontal"),new i.fL("Add {{horizontal:true}} to change the layout of list group items from vertical to horizontal across all breakpoints. Alternatively, choose a responsive variant {{horizontal:'{sm|md|lg|xl|xxl}'}} to make a list group horizontal starting at that breakpoint’s {{min-width}}. Currently {{b::horizontal list groups cannot be combined with flush list groups}}."),new i.TU({showViewport:!0,outputAttr:{display:"grid",gap:3},output:()=>{let t=[new o.b.pb.wc("An item"),new o.b.pb.wc("A second item"),new o.b.pb.wc("A third item")];return[new o.b.pb.nC({horizontal:!0},t),new o.b.pb.nC({horizontal:"sm"},t),new o.b.pb.nC({horizontal:"md"},t),new o.b.pb.nC({horizontal:"lg"},t),new o.b.pb.nC({horizontal:"xl"},t),new o.b.pb.nC({horizontal:"xxl"},t),,]}}),new i.fL("{{b::ProTip:}} Want equal-width list group items when horizontal? Add {{flex:'fill'}} to each {{b.list.item}}."),new i.TU({showViewport:!0,outputAttr:{display:"grid",gap:3},output:()=>{let t=[new o.b.pb.wc({flex:"fill"},"An item"),new o.b.pb.wc({flex:"fill"},"A second item"),new o.b.pb.wc({flex:"fill"},"A third item")];return[new o.b.pb.nC({horizontal:!0},t),new o.b.pb.nC({horizontal:"sm"},t),new o.b.pb.nC({horizontal:"md"},t),new o.b.pb.nC({horizontal:"lg"},t),new o.b.pb.nC({horizontal:"xl"},t),new o.b.pb.nC({horizontal:"xxl"},t),,]}})]),new i.qi([new i.TN("Variants"),new i.Z9({color:"info",callout:!0},"{{b::Heads up!}} As of v5.3.0, the {{list-group-item-variant()}} Sass mixin is deprecated. List group item variants now have their CSS variables overridden in {{nav:docs/components/list#sass_loop::the Sass loop}}."),new i.fL("Use {{color:'<value>'}} property to style list items with a stateful background and color."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC([void 0,"primary","secondary","success","danger","warning","info","light","dark"].map((t=>new o.b.pb.wc({color:t},`A simple ${t||"default"} list group item`))))})]),new i.qi([new i.Oc("For links and buttons"),new i.fL("The {{color:'<value>'}} property also work with {{action:true}} for {{new b.tabList.item}} component. Note the addition of the hover styles here not present in the previous example. Also supported is the {{active:true}} state; apply it to indicate an active selection on a contextual list group item."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.SN.container([void 0,"primary","secondary","success","danger","warning","info","light","dark"].map((t=>new o.b.SN.item({href:"#",action:!0,color:t},`A simple ${t||"default"} list group item`))))}),new i.Z9({color:"info",callout:!0},"{{b::Accessibility tip:}} Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies like screen readers. Please ensure the meaning is obvious from the content itself (e.g., the visible text) or is included through alternative means, such as additional text hidden with the {{visually:'hidden'}} property.")]),new i.qi([new i.TN("With badges"),new i.fL("Add badges to any list group item to show unread counts, activity, and more with the help of some {{nav:docs/utilities/flex::utilities}}."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC([{label:"A list item",counter:14},{label:"A second list item",counter:2},{label:"A third list item",counter:1}].map((t=>new o.b.pb.wc({display:"flex",justifyContent:"between",alignItem:"center"},[t.label,new o.b.R0({bgColor:"primary",rounded:"pill"},t.counter.toString())]))))})]),new i.qi([new i.TN("Custom content"),new i.fL("Add nearly any component within, even for linked list groups like the one below, with the help of {{nav:docs/utilities/flex::flexbox utilities}}."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.SN.container({style:{maxWidth:"400px"}},[{label:"And some small print",active:!0},{label:"And some muted small print"},{label:"And some muted small print"}].map((t=>new o.b.SN.item({href:"#",action:!0,active:t.active},[new o.h.hi({display:"flex",width:100,justifyContent:"between"},[new o.h.h(5,{marginBottom:1},"List group item heading"),new o.h.yG({textColor:t.active?void 0:"body-secondary"},"3 days ago")]),new o.h.p({marginBottom:1},"Some placeholder content in a paragraph."),new o.h.yG({textColor:t.active?void 0:"body-secondary"},t.label)]))))})]),new i.qi([new i.TN("Checkboxes and radios"),new i.fL("Place Bootstrap’s checkboxes and radios within list group items and customize as needed. You can use them without {{b.label}}s, but please remember to include an {{label}} property and value for accessibility."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC(["first","second","third"].map((t=>new o.b.pb.wc([new o.b.qH({type:"checkbox",id:`${t}Checkbox`,marginEnd:2}),new o.b.PS({for:`${t}Checkbox`,class:"form-check-label"},`${o.v.uppercaseFirst(t)} checkbox`)]))))}),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC(["first","second","third"].map((t=>new o.b.pb.wc([new o.b.qH({type:"radio",id:`${t}Radio`,name:"listGroupRadio",marginEnd:2}),new o.b.PS({for:`${t}Radio`,class:"form-check-label"},`${o.v.uppercaseFirst(t)} radio`)]))))}),new i.fL("You can use {{stretched:true}} property on {{b.label}}s to make the whole {{b.list.item}} clickable."),new i.TU({outputAttr:{class:"list-group-w-400px"},output:()=>new o.b.pb.nC(["first","second","third"].map((t=>new o.b.pb.wc([new o.b.qH({type:"checkbox",id:`${t}CheckboxStretched`,marginEnd:2}),new o.b.PS({for:`${t}CheckboxStretched`,class:"form-check-label",stretched:!0},`${o.v.uppercaseFirst(t)} checkbox`)]))))})]),new i.qi([new i.TN("CSS")]),new i.qi([new i.Oc("Variables"),new i.fL("As part of Bootstrap’s evolving CSS variables approach, list groups now use local CSS variables on {{.list-group}} for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too."),new i.LX({type:"css",title:"scss/_list-group.scss",source:"https://github.com/twbs/bootstrap/blob/v5.3.0/scss/_list-group.scss",code:"\n\t\t\t\t\t\t--#{$prefix}list-group-color: #{$list-group-color};\n\t\t\t\t\t\t--#{$prefix}list-group-bg: #{$list-group-bg};\n\t\t\t\t\t\t--#{$prefix}list-group-border-color: #{$list-group-border-color};\n\t\t\t\t\t\t--#{$prefix}list-group-border-width: #{$list-group-border-width};\n\t\t\t\t\t\t--#{$prefix}list-group-border-radius: #{$list-group-border-radius};\n\t\t\t\t\t\t--#{$prefix}list-group-item-padding-x: #{$list-group-item-padding-x};\n\t\t\t\t\t\t--#{$prefix}list-group-item-padding-y: #{$list-group-item-padding-y};\n\t\t\t\t\t\t--#{$prefix}list-group-action-color: #{$list-group-action-color};\n\t\t\t\t\t\t--#{$prefix}list-group-action-hover-color: #{$list-group-action-hover-color};\n\t\t\t\t\t\t--#{$prefix}list-group-action-hover-bg: #{$list-group-hover-bg};\n\t\t\t\t\t\t--#{$prefix}list-group-action-active-color: #{$list-group-action-active-color};\n\t\t\t\t\t\t--#{$prefix}list-group-action-active-bg: #{$list-group-action-active-bg};\n\t\t\t\t\t\t--#{$prefix}list-group-disabled-color: #{$list-group-disabled-color};\n\t\t\t\t\t\t--#{$prefix}list-group-disabled-bg: #{$list-group-disabled-bg};\n\t\t\t\t\t\t--#{$prefix}list-group-active-color: #{$list-group-active-color};\n\t\t\t\t\t\t--#{$prefix}list-group-active-bg: #{$list-group-active-bg};\n\t\t\t\t\t\t--#{$prefix}list-group-active-border-color: #{$list-group-active-border-color};\n\t\t\t\t\t"})]),new i.qi([new i.Oc("Sass variables"),new i.LX({type:"css",title:"scss/_variables.scss",source:"https://github.com/twbs/bootstrap/blob/v5.3.0/scss/_variables.scss",code:"\n\t\t\t\t\t\t$list-group-color:                  var(--#{$prefix}body-color);\n\t\t\t\t\t\t$list-group-bg:                     var(--#{$prefix}body-bg);\n\t\t\t\t\t\t$list-group-border-color:           var(--#{$prefix}border-color);\n\t\t\t\t\t\t$list-group-border-width:           var(--#{$prefix}border-width);\n\t\t\t\t\t\t$list-group-border-radius:          var(--#{$prefix}border-radius);\n\n\t\t\t\t\t\t$list-group-item-padding-y:         $spacer * .5;\n\t\t\t\t\t\t$list-group-item-padding-x:         $spacer;\n\t\t\t\t\t\t// fusv-disable\n\t\t\t\t\t\t$list-group-item-bg-scale:          -80%; // Deprecated in v5.3.0\n\t\t\t\t\t\t$list-group-item-color-scale:       40%; // Deprecated in v5.3.0\n\t\t\t\t\t\t// fusv-enable\n\n\t\t\t\t\t\t$list-group-hover-bg:               var(--#{$prefix}tertiary-bg);\n\t\t\t\t\t\t$list-group-active-color:           $component-active-color;\n\t\t\t\t\t\t$list-group-active-bg:              $component-active-bg;\n\t\t\t\t\t\t$list-group-active-border-color:    $list-group-active-bg;\n\n\t\t\t\t\t\t$list-group-disabled-color:         var(--#{$prefix}secondary-color);\n\t\t\t\t\t\t$list-group-disabled-bg:            $list-group-bg;\n\n\t\t\t\t\t\t$list-group-action-color:           var(--#{$prefix}secondary-color);\n\t\t\t\t\t\t$list-group-action-hover-color:     var(--#{$prefix}emphasis-color);\n\n\t\t\t\t\t\t$list-group-action-active-color:    var(--#{$prefix}body-color);\n\t\t\t\t\t\t$list-group-action-active-bg:       var(--#{$prefix}secondary-bg);\n\t\t\t\t\t"})]),new i.qi([new i.Oc("Sass loop"),new i.fL("Loop that generates the modifier classes with an overriding of CSS variables."),new i.LX({type:"css",title:"scss/_list-group.scss",source:"https://github.com/twbs/bootstrap/blob/v5.3.0/scss/_list-group.scss",code:'\n\t\t\t\t\t\t// List group contextual variants\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Add modifier classes to change text and background color on individual items.\n\t\t\t\t\t\t// Organizationally, this must come after the ":hover" states.\n\n\t\t\t\t\t\t@each $state in map-keys($theme-colors) {\n\t\t\t\t\t\t\t.list-group-item-#{$state} {\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-color: var(--#{$prefix}#{$state}-text-emphasis);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-bg: var(--#{$prefix}#{$state}-bg-subtle);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-border-color: var(--#{$prefix}#{$state}-border-subtle);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-action-hover-color: var(--#{$prefix}emphasis-color);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-action-hover-bg: var(--#{$prefix}#{$state}-border-subtle);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-action-active-color: var(--#{$prefix}emphasis-color);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-action-active-bg: var(--#{$prefix}#{$state}-border-subtle);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-active-color: var(--#{$prefix}#{$state}-bg-subtle);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-active-bg: var(--#{$prefix}#{$state}-text-emphasis);\n\t\t\t\t\t\t\t\t--#{$prefix}list-group-active-border-color: var(--#{$prefix}#{$state}-text-emphasis);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t'})]),new i.qi([new i.TN("Tab behavior"),new i.fL("Use the tab JavaScript plugin—include it individually or through the compiled {{bootstrap.js}} file—to extend Bootstrap list group to create tabbable panes of local content."),new i.TU({output:()=>{const t=["home","profile","messages","settings"];return new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-tab"},t.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-${t}-list`,controlfor:`list-${t}`,href:`#list-${t}`,autoInit:!0},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-tabContent"},t.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-${t}`,labelledby:`#list-${t}-list`},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))])}})]),new i.qi([new i.Oc("Using {{autoInit}} property"),new i.fL("You can activate a list group navigation automaticly by simply specifying {{autoInit:true}} on {{b.tabList.item}}. Make sure you provide {{href}} property that point to {{b.tabList.tab.pane}} {{id}}"),new i.TU({output:()=>{const t=["home","profile","messages","settings"];return new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-useprop-tab"},t.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-useprop-${t}-list`,controlfor:`list-useprop-${t}`,href:`#list-useprop-${t}`,autoInit:!0},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-useprop-tabContent"},t.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-useprop-${t}`,labelledby:`#list-useprop-${t}-list`},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))])}})]),new i.qi([new i.Oc("Manual init"),new i.fL("Enable tabbable list item via JavaScript (each list item needs to be activated individually):"),new i.Z9({callout:!0,color:"warning"},"By manually addEventListener, make sure you remove the event listernet on element remove to prevent memory leak."),new i.TU({outputAttr:{display:"flex",flex:"wrap",gap:2},output:()=>{const t=new o.b.LI({textWrap:!1,on:{click:t=>{const e=t.target;document.querySelectorAll("#list-manual-tab a").forEach((t=>{const e=o.b.SN.init(t);t.addEventListener("click",(t=>{t.preventDefault(),e.show()}))})),o.b.Am.show(o.b.Am.create({title:document.title,color:"success",elem:"Tab trigger attached"})),e.closest(".row")?.remove()}}},new o.b.VJ({icon:"paperclip"},"Attach tab")),e=["home","profile","messages","settings"];return[new o.h.hi({row:!0},new o.h.hi({col:[5,"md-4"],display:"grid"},t)),new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-manual-tab"},e.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-manual-${t}-list`,controlfor:`list-manual-${t}`,href:`#list-manual-${t}`},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-manual-tabContent"},e.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-manual-${t}`,labelledby:`#list-manual-${t}-list`},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))])]}}),new i.fL("You can activate individual list item in several ways:"),new i.Z9({callout:!0,color:"success"},"{{bsts}} automaticly {{removeEventListener}} for event that create using {{on}} property to prevent memory leak."),new i.TU({outputAttr:{display:"flex",flex:"wrap",gap:2},output:()=>{const t=["home","profile","messages","settings"];return new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-direct-tab"},t.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-direct-${t}-list`,controlfor:`list-direct-${t}`,href:`#list-direct-${t}`,on:{click:t=>{t.preventDefault();const e=t.target;o.b.SN.show(e)}}},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-direct-tabContent"},t.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-direct-${t}`,labelledby:`#list-direct-${t}-list`},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))])}})]),new i.qi([new i.Oc("Fade effect"),new i.fL("By default, {{bsts}} add {{.fade}} class automaticly into {{b.tabList.tab.pane}} component. You can disable it by set {{animation:false}} to each {{b.tabList.tab.pane}}"),new i.TU({output:()=>{const t=["home","profile","messages","settings"];return new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-noanimate-tab"},t.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-noanimate-${t}-list`,controlfor:`list-noanimate-${t}`,href:`#list-noanimate-${t}`,autoInit:!0},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-noanimate-tabContent"},t.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-noanimate-${t}`,labelledby:`#list-noanimate-${t}-list`,animation:!1},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))])}})]),new i.qi([new i.Oc("Methods"),new i.Z9({color:"danger",callout:!0},"{{b::All API methods are asynchronous and start a transition}}. They return to the caller as soon as the transition is started, but before it ends. In addition, a method call on a transitioning component will be ignored. {{https://getbootstrap.com/docs/5.3/getting-started/javascript/#asynchronous-functions-and-transitions::Learn more in Bootstrap JavaScript docs}}."),new i.fL("Activates your content as a tab element."),new i.fL("You can create a tab instance with the constructor, for example:"),new i.LX({type:"js",code:"\n\t\t\t\t\t\tconst bsTab = new bootstrap.Tab('#myTab')\n\t\t\t\t\t"}),new i.Kz({item:[["Method","Description"],["{{dispose}}","Destroys an element’s tab."],["{{getInstance}}","Static method which allows you to get the tab instance associated with a DOM element, you can use it like this: {{bootstrap.Tab.getInstance(element)}}."],["{{getOrCreateInstance}}","Static method which returns a tab instance associated to a DOM element or create a new one in case it wasn’t initialized. You can use it like this: {{bootstrap.Tab.getOrCreateInstance(element)}}."],["{{show}}","Selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden. {{b::Returns to the caller before the tab pane has actually been shown}} (i.e. before the {{shown.bs.tab}} event occurs)."]]}),new i.TU({outputAttr:{position:"relative"},showConsole:!0,output:()=>{const t=["home","profile","messages","settings"],e=t=>{t.preventDefault();const e=t.target;o.b.SN.show(e)},n=new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-method-tab"},t.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-method-${t}-list`,controlfor:`list-method-${t}`,href:`#list-method-${t}`},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-method-tabContent"},t.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-method-${t}`,labelledby:`#list-method-${t}-list`},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))]),a=new o.b.LI({color:"success",on:{click:t=>{const n=document.querySelectorAll("#list-method-tab a");n.forEach((t=>{t.addEventListener("click",e)})),i.iV(t.target,"b.tabList.init",n||"null",n?"success":"danger")}}},"init"),s=new o.b.LI({color:"success",on:{click:t=>{const e=document.querySelectorAll("#list-method-tab a");let n=[];e.forEach((t=>{n.push(o.b.SN.getInstance(t))})),i.iV(t.target,"b.tabList.getInstance",n&&n.length>0?n:"null",n&&n.length>0?"success":"danger")}}},"getInstance"),r=new o.b.LI({color:"success",on:{click:t=>{const e=document.querySelectorAll("#list-method-tab a");let n=[];e.forEach((t=>{n.push(o.b.SN.getOrCreateInstance(t))})),i.iV(t.target,"b.tabList.getOrCreateInstance",n&&n.length>0?n:"null",n&&n.length>0?"success":"danger")}}},"getOrCreateInstance"),l=new o.b.LI({on:{click:t=>{const e=document.querySelectorAll("#list-method-tab a");if(e){let n=e[o.v.rndBetween(0,e.length-1)];n&&(o.b.SN.show(n),i.iV(t.target,"b.tabList.show",n||"null",n?"success":"danger"))}}}},"show (random)"),c=new o.b.LI({color:"danger",on:{click:t=>{const n=document.querySelectorAll("#list-method-tab a");n.forEach((t=>{o.b.SN.dispose(t),t.removeEventListener("click",e)})),i.iV(t.target,"b.tabList.dispose",n&&n.length>0?n:"null",n&&n.length>0?"success":"danger")}}},"dispose"),p=new o.b.a5({vertical:!0,weight:"sm"},[a,s,r,l,c]),b=new o.h.hi({width:100,marginEnd:3,bgColor:"body-tertiary",rounded:!0,padding:2},n),d=new o.h.hi({marginStart:"auto"},p);return[new o.h.hi({display:"flex"},[b,d])]}})]),new i.qi([new i.Oc("Events"),new i.fL("When showing a new tab, the events fire in the following order:"),new i.ol({item:["{{hide.bs.tab}} (on the current active tab)","{{show.bs.tab}} (on the to-be-shown tab)","{{hidden.bs.tab}} (on the previous active tab, the same one as for the {{hide.bs.tab}} event)","{{shown.bs.tab}} (on the newly-active just-shown tab, the same one as for the {{show.bs.tab}} event)"]}),new i.fL("If no tab was already active, then the {{hide.bs.tab}} and {{hidden.bs.tab}} events will not be fired."),new i.Kz({item:[["Event type","Description"],["{{hide.bs.tab}}","This event fires when a new tab is to be shown (and thus the previous active tab is to be hidden). Use {{event.target}} and {{event.relatedTarget}} to target the current active tab and the new soon-to-be-active tab, respectively."],["{{hidden.bs.tab}}","This event fires after a new tab is shown (and thus the previous active tab is hidden). Use {{event.target}} and {{event.relatedTarget}} to target the previous active tab and the new active tab, respectively."],["{{show.bs.tab}}","This event fires on tab show, but before the new tab has been shown. Use {{event.target}} and {{event.relatedTarget}} to target the active tab and the previous active tab (if available) respectively."],["{{shown.bs.tab}}","This event fires on tab show after a tab has been shown. Use {{event.target}} and {{event.relatedTarget}} to target the active tab and the previous active tab (if available) respectively."]]}),new i.TU({showConsole:!0,output:()=>{const t=["home","profile","messages","settings"];return new o.h.hi({row:!0},[new o.h.hi({col:[5,"md-4"]},new o.b.SN.container({id:"list-event-tab"},t.map(((t,e)=>new o.b.SN.item({active:0===e,id:`list-event-${t}-list`,controlfor:`list-event-${t}`,href:`#list-event-${t}`,autoInit:!0,on:{"shown.bs.tab":t=>{const e=t;i.iV(e.target,"shown.bs.tab",`target: {{b::${e.target}}}{{br}}relatedTarget: {{b::${e.relatedTarget}}}`,"info")}}},o.v.uppercaseFirst(t)))))),new o.h.hi({col:[7,"md-8"]},new o.b.SN.tab.content({id:"nav-event-tabContent"},t.map(((t,e)=>new o.b.SN.tab.pane({active:0===e,id:`list-event-${t}`,labelledby:`#list-event-${t}-list`,animation:!1},`Some placeholder content in a paragraph relating to "${o.v.uppercaseFirst(t)}". And some more content, used here just to pad out and fill this tab panel. In production, you would obviously have more real content here. And not just text. It could be anything, really. Text, images, forms.`)))))])}})])]}}}]);