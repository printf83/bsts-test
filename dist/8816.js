"use strict";(self.webpackChunk_printf83_bsts_test=self.webpackChunk_printf83_bsts_test||[]).push([[8816],{8816:(e,t,a)=>{a.r(t),a.d(t,{floating_label:()=>o});var l=a(195),n=a(7763);const o={title:"Floating labels",description:"Create beautifully simple form labels that float over your input fields.",item:()=>[new n.qi([new n.TN("Example"),new n.fL("Wrap a pair of {{<input class='form-control'>}} and {{<label>}} elements in {{.form-floating}} to enable floating labels with Bootstrap’s textual form fields. A {{placeholder}} is required on each {{<input>}} as Bootstrap method of CSS-only floating labels uses the {{:placeholder-shown}} pseudo-element. Also note that the {{<input>}} must come first so Bootstrap can utilize a sibling selector (e.g., {{~}})."),new n.TU({output:()=>[new l.b.Z0({marginBottom:3},[new l.b.qH({type:"email",id:"floatingInput",placeholder:"name@example.com"}),new l.b.PS({for:"floatingInput"},"Email address")]),new l.b.Z0([new l.b.qH({type:"password",id:"floatingPassword",placeholder:"Password"}),new l.b.PS({for:"floatingPassword"},"Password")])]}),new n.fL("Using {{b.form.floatinglabel.input}} :"),new n.TU({output:()=>[l.b.cr.floatinglabel.input({container:{marginBottom:3},type:"email",label:"Email address",placeholder:"name@example.com"}),l.b.cr.floatinglabel.input({type:"password",label:"Password"})]}),new n.fL("When there’s a {{value}} already defined, {{<label>}}s will automatically adjust to their floated position."),new n.TU({output:()=>l.b.cr.floatinglabel.input({type:"email",label:"Input with value",value:"test@example.com"})}),new n.fL("Form validation styles also work as expected."),new n.TU({output:()=>l.b.cr.floatinglabel.input({type:"email",label:"Invalid input",value:"test@example.com",isvalid:!1})})]),new n.qi([new n.TN("Textareas"),new n.fL("By default, {{<textarea>}}s with {{.form-control}} will be the same height as {{<input>}}s."),new n.TU({output:()=>l.b.cr.floatinglabel.textarea({label:"Comments"})}),new n.fL("To set a custom height on your {{<textarea>}}, do not use the {{rows}} attribute. Instead, set an explicit {{height}} (either inline or via custom CSS)."),new n.TU({output:()=>l.b.cr.floatinglabel.textarea({label:"Comments",style:{height:"100px"}})})]),new n.qi([new n.TN("Selects"),new n.fL("Other than {{.form-control}}, floating labels are only available on {{.form-selects}}. They work in the same way, but unlike {{<input>}}s, they’ll always show the {{<label>}} in its floated state. {{b::Selects with }}{{bc::size}}{{b:: and }}{{bc::multiple}}{{b:: are not supported}}."),new n.TU({output:()=>l.b.cr.floatinglabel.select({label:"Work with selects",item:[{selected:!0,elem:"Open this select menu"},{value:"1",elem:"One"},{value:"2",elem:"Two"},{value:"3",elem:"Three"}]})})]),new n.qi([new n.TN("Disabled"),new n.fL("Add the {{disabled}} boolean attribute on an input, a textarea or a select to give it a grayed out appearance, remove pointer events, and prevent focusing."),new n.TU({output:()=>[l.b.cr.floatinglabel.input({container:{marginBottom:3},label:"Email address",type:"email",disabled:!0}),l.b.cr.floatinglabel.textarea({container:{marginBottom:3},label:"Comments",disabled:!0}),l.b.cr.floatinglabel.textarea({container:{marginBottom:3},label:"Comments",disabled:!0,style:{height:"100px"}}),l.b.cr.floatinglabel.select({label:"Work with selects",disabled:!0,item:[{selected:!0,elem:"Open this select menu"},{value:"1",elem:"One"},{value:"2",elem:"Two"},{value:"3",elem:"Three"}]})]})]),new n.qi([new n.TN("Readonly plaintext"),new n.fL("Floating labels also support {{.form-control-plaintext}}, which can be helpful for toggling from an editable {{<input>}} to a plaintext value without affecting the page layout."),new n.TU({output:()=>[l.b.cr.floatinglabel.input({container:{marginBottom:3},label:"Empty input",type:"email",readonly:!0,plaintext:!0}),l.b.cr.floatinglabel.input({label:"Input with value",type:"email",value:"name@example.com",readonly:!0,plaintext:!0})]})]),new n.qi([new n.TN("Input groups"),new n.fL("Floating labels also support {{.input-group}}."),new n.TU({output:()=>l.b.cr.floatinglabel.input({label:"Username",type:"text",before:"@"})}),new n.fL("When using {{.input-group}} and {{.form-floating}} along with form validation, the {{-feedback}} should be placed outside of the {{.form-floating}}, but inside of the {{.input-group}}. This means that the feedback will need to be shown using javascript."),new n.TU({output:()=>l.b.cr.floatinglabel.input({invalidFeedback:"Please choose a username.",label:"Username",type:"text",before:"@",isvalid:!1,required:!0})})]),new n.qi([new n.TN("Layout"),new n.fL("When working with the Bootstrap grid system, be sure to place form elements within column classes."),new n.TU({output:()=>new l.h.hi({row:!0,gutter:3},[l.b.cr.floatinglabel.input({container:{col:"md"},label:"Email address",type:"email",value:"mdo@example.com"}),l.b.cr.floatinglabel.select({container:{col:"md"},label:"Work with selects",item:[{selected:!0,elem:"Open this select menu"},{value:"1",elem:"One"},{value:"2",elem:"Two"},{value:"3",elem:"Three"}]})])})]),new n.qi([new n.TN("CSS")]),new n.qi([new n.Oc("Sass variables"),new n.LX({type:"css",title:"scss/_variables.scss",source:"https://github.com/twbs/bootstrap/blob/v5.3.0/scss/_variables.scss",code:"\n\t\t\t\t\t\t$form-floating-height:                  add(3.5rem, $input-height-border);\n\t\t\t\t\t\t$form-floating-line-height:             1.25;\n\t\t\t\t\t\t$form-floating-padding-x:               $input-padding-x;\n\t\t\t\t\t\t$form-floating-padding-y:               1rem;\n\t\t\t\t\t\t$form-floating-input-padding-t:         1.625rem;\n\t\t\t\t\t\t$form-floating-input-padding-b:         .625rem;\n\t\t\t\t\t\t$form-floating-label-height:            1.5em;\n\t\t\t\t\t\t$form-floating-label-opacity:           .65;\n\t\t\t\t\t\t$form-floating-label-transform:         scale(.85) translateY(-.5rem) translateX(.15rem);\n\t\t\t\t\t\t$form-floating-label-disabled-color:    $gray-600;\n\t\t\t\t\t\t$form-floating-transition:              opacity .1s ease-in-out, transform .1s ease-in-out;\n\t\t\t\t\t"})])]}}}]);